{"version":3,"file":"main.6fbdd9a50be9de7bb770.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;AAEA;AACA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;AACA;;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAPA;;AAAA;AASA;AAAA;;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAXA;;AAAA;AAaA;AAAA;;AACA;;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAPA;;AAAA;AASA;AAAA;;AACA;;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAPA;;AAAA;AASA;AAAA;;AAEA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAOA;;AAZA;;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://my-app/./src/stories/input.stories.tsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, {ChangeEvent, useRef, useState} from \\\"react\\\";\\r\\n\\r\\nexport default {\\r\\n    title: 'input'\\r\\n}\\r\\n\\r\\nexport const UncontrolledInput = () => <input/>\\r\\nexport const ControlledInputWithFixedValue = () => <input value={'value'}/>\\r\\n\\r\\nexport const TrackValueOfUncontrolledInput = () => {\\r\\n    const [value, setValue] = useState('')\\r\\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\\r\\n        setValue(e.currentTarget.value)\\r\\n    }\\r\\n\\r\\n    return <><input onChange={onChange}/> {value}</>\\r\\n}\\r\\n\\r\\nexport const GetValueAfterButtonClick = () => {\\r\\n    const [value, setValue] = useState('')\\r\\n    const inputRef = useRef<HTMLInputElement>(null)\\r\\n\\r\\n    const actualValue = () => {\\r\\n        const av = inputRef.current as HTMLInputElement\\r\\n        setValue(av.value)\\r\\n    }\\r\\n\\r\\n\\r\\n    return <><input ref={inputRef}/><button onClick={actualValue}>save</button> actual value: {value}</>\\r\\n}\\r\\n\\r\\nexport const ControlledInput = () => {\\r\\n    const [parentValue, setParentValue] = useState('')\\r\\n    const value = (e: ChangeEvent<HTMLInputElement>) => {\\r\\n        setParentValue(e.currentTarget.value)\\r\\n    }\\r\\n\\r\\n    return <><input value={parentValue} onChange={value}/> value: {parentValue}</>\\r\\n}\\r\\n\\r\\nexport const ControlledCheckbox = () => {\\r\\n    const [parentValue, setParentValue] = useState<boolean>(true)\\r\\n    const valueCheck = (e: ChangeEvent<HTMLInputElement>) => {\\r\\n        setParentValue(e.currentTarget.checked)\\r\\n    }\\r\\n\\r\\n    return <><input type={'checkbox'} checked={parentValue} onChange={valueCheck}/> {`checkbox: ${parentValue}`}</>\\r\\n}\\r\\n\\r\\nexport const ControlledSelect = () => {\\r\\n\\r\\n    const [parentValue, setParentValue] = useState<string | undefined>(undefined)\\r\\n    \\r\\n\\r\\n    return <select>\\r\\n        <option></option>\\r\\n        <option value={'1'}>Kiev</option>\\r\\n        <option value={'2'}>Moscow</option>\\r\\n        <option value={'3'}>Minsk</option>\\r\\n\\r\\n    </select>\\r\\n}\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"UncontrolledInput\":{\"startLoc\":{\"col\":33,\"line\":7},\"endLoc\":{\"col\":47,\"line\":7},\"startBody\":{\"col\":33,\"line\":7},\"endBody\":{\"col\":47,\"line\":7}},\"ControlledInputWithFixedValue\":{\"startLoc\":{\"col\":45,\"line\":8},\"endLoc\":{\"col\":75,\"line\":8},\"startBody\":{\"col\":45,\"line\":8},\"endBody\":{\"col\":75,\"line\":8}},\"TrackValueOfUncontrolledInput\":{\"startLoc\":{\"col\":45,\"line\":10},\"endLoc\":{\"col\":1,\"line\":17},\"startBody\":{\"col\":45,\"line\":10},\"endBody\":{\"col\":1,\"line\":17}},\"GetValueAfterButtonClick\":{\"startLoc\":{\"col\":40,\"line\":19},\"endLoc\":{\"col\":1,\"line\":30},\"startBody\":{\"col\":40,\"line\":19},\"endBody\":{\"col\":1,\"line\":30}},\"ControlledInput\":{\"startLoc\":{\"col\":31,\"line\":32},\"endLoc\":{\"col\":1,\"line\":39},\"startBody\":{\"col\":31,\"line\":32},\"endBody\":{\"col\":1,\"line\":39}},\"ControlledCheckbox\":{\"startLoc\":{\"col\":34,\"line\":41},\"endLoc\":{\"col\":1,\"line\":48},\"startBody\":{\"col\":34,\"line\":41},\"endBody\":{\"col\":1,\"line\":48}},\"ControlledSelect\":{\"startLoc\":{\"col\":32,\"line\":50},\"endLoc\":{\"col\":1,\"line\":62},\"startBody\":{\"col\":32,\"line\":50},\"endBody\":{\"col\":1,\"line\":62}}};\n    \nimport React, {ChangeEvent, useRef, useState} from \"react\";\r\n\r\nexport default {\r\n    title: 'input'\r\n}\r\n\r\nexport const UncontrolledInput = () => <input/>;\r\nexport const ControlledInputWithFixedValue = () => <input value={'value'}/>;\r\n\r\nexport const TrackValueOfUncontrolledInput = () => {\r\n    const [value, setValue] = useState('')\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n\r\n    return <><input onChange={onChange}/> {value}</>\r\n};\r\n\r\nexport const GetValueAfterButtonClick = () => {\r\n    const [value, setValue] = useState('')\r\n    const inputRef = useRef<HTMLInputElement>(null)\r\n\r\n    const actualValue = () => {\r\n        const av = inputRef.current as HTMLInputElement\r\n        setValue(av.value)\r\n    }\r\n\r\n\r\n    return <><input ref={inputRef}/><button onClick={actualValue}>save</button> actual value: {value}</>\r\n};\r\n\r\nexport const ControlledInput = () => {\r\n    const [parentValue, setParentValue] = useState('')\r\n    const value = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setParentValue(e.currentTarget.value)\r\n    }\r\n\r\n    return <><input value={parentValue} onChange={value}/> value: {parentValue}</>\r\n};\r\n\r\nexport const ControlledCheckbox = () => {\r\n    const [parentValue, setParentValue] = useState<boolean>(true)\r\n    const valueCheck = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setParentValue(e.currentTarget.checked)\r\n    }\r\n\r\n    return <><input type={'checkbox'} checked={parentValue} onChange={valueCheck}/> {`checkbox: ${parentValue}`}</>\r\n};\r\n\r\nexport const ControlledSelect = () => {\r\n\r\n    const [parentValue, setParentValue] = useState<string | undefined>(undefined)\r\n    \r\n\r\n    return <select>\r\n        <option></option>\r\n        <option value={'1'}>Kiev</option>\r\n        <option value={'2'}>Moscow</option>\r\n        <option value={'3'}>Minsk</option>\r\n\r\n    </select>\r\n};\n\n\nUncontrolledInput.parameters = { storySource: { source: \"() => <input/>\" }, ...UncontrolledInput.parameters };\nControlledInputWithFixedValue.parameters = { storySource: { source: \"() => <input value={'value'}/>\" }, ...ControlledInputWithFixedValue.parameters };\nTrackValueOfUncontrolledInput.parameters = { storySource: { source: \"() => {\\r\\n    const [value, setValue] = useState('')\\r\\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\\r\\n        setValue(e.currentTarget.value)\\r\\n    }\\r\\n\\r\\n    return <><input onChange={onChange}/> {value}</>\\r\\n}\" }, ...TrackValueOfUncontrolledInput.parameters };\nGetValueAfterButtonClick.parameters = { storySource: { source: \"() => {\\r\\n    const [value, setValue] = useState('')\\r\\n    const inputRef = useRef<HTMLInputElement>(null)\\r\\n\\r\\n    const actualValue = () => {\\r\\n        const av = inputRef.current as HTMLInputElement\\r\\n        setValue(av.value)\\r\\n    }\\r\\n\\r\\n\\r\\n    return <><input ref={inputRef}/><button onClick={actualValue}>save</button> actual value: {value}</>\\r\\n}\" }, ...GetValueAfterButtonClick.parameters };\nControlledInput.parameters = { storySource: { source: \"() => {\\r\\n    const [parentValue, setParentValue] = useState('')\\r\\n    const value = (e: ChangeEvent<HTMLInputElement>) => {\\r\\n        setParentValue(e.currentTarget.value)\\r\\n    }\\r\\n\\r\\n    return <><input value={parentValue} onChange={value}/> value: {parentValue}</>\\r\\n}\" }, ...ControlledInput.parameters };\nControlledCheckbox.parameters = { storySource: { source: \"() => {\\r\\n    const [parentValue, setParentValue] = useState<boolean>(true)\\r\\n    const valueCheck = (e: ChangeEvent<HTMLInputElement>) => {\\r\\n        setParentValue(e.currentTarget.checked)\\r\\n    }\\r\\n\\r\\n    return <><input type={'checkbox'} checked={parentValue} onChange={valueCheck}/> {`checkbox: ${parentValue}`}</>\\r\\n}\" }, ...ControlledCheckbox.parameters };\nControlledSelect.parameters = { storySource: { source: \"() => {\\r\\n\\r\\n    const [parentValue, setParentValue] = useState<string | undefined>(undefined)\\r\\n    \\r\\n\\r\\n    return <select>\\r\\n        <option></option>\\r\\n        <option value={'1'}>Kiev</option>\\r\\n        <option value={'2'}>Moscow</option>\\r\\n        <option value={'3'}>Minsk</option>\\r\\n\\r\\n    </select>\\r\\n}\" }, ...ControlledSelect.parameters };"],"names":[],"sourceRoot":""}